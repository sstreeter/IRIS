import sys
import os
import datetime
from typing import Any # ADDED: Import typing hints

# Import necessary components from helpers.py using relative path
from ...helpers import MockAppInstance, Helpers

def generate_scheduled_tasks_report(app_instance: Any, helpers: Any, browser_preference: str = "System Default"):
    """
    Gathers and reports scheduled tasks on macOS (LaunchDaemons/Agents, Cron jobs).
    """
    app_instance.log_output("\n--- Generating Scheduled Tasks Report ---")
    
    html_body = "<h2>Scheduled Tasks Report</h2>"

    if sys.platform == "darwin":
        # --- LaunchDaemons (System-wide, often requires sudo) ---
        html_body += "<h3>macOS LaunchDaemons (System-wide Tasks)</h3>"
        app_instance.log_output("Gathering LaunchDaemons from /Library/LaunchDaemons/ and /System/Library/LaunchDaemons/...")
        daemon_paths = ["/Library/LaunchDaemons/", "/System/Library/LaunchDaemons/"] 
        
        daemon_data = []
        for path_dir in daemon_paths:
            app_instance.log_output(f"Checking LaunchDaemon directory: {path_dir}")
            if os.path.exists(path_dir):
                app_instance.log_output(f"Directory exists: {path_dir}")
                list_output = helpers.run_command(f"sudo ls {path_dir}", check_shell=True, app_instance=app_instance) 
                if list_output:
                    app_instance.log_output(f"Successfully listed files in {path_dir}. Processing {len(list_output.strip().splitlines())} files.")
                    for filename in list_output.strip().splitlines(): 
                        if filename.endswith(".plist"):
                            plist_file_path = os.path.join(path_dir, filename)
                            app_instance.log_output(f"  Attempting to read plist: {plist_file_path}")
                            data = helpers.read_plist_file(plist_file_path, app_instance=app_instance)
                            if data:
                                program_arg = "N/A"
                                if "Program" in data:
                                    program_arg = data["Program"]
                                elif "ProgramArguments" in data:
                                    program_arg = " ".join(map(str, data["ProgramArguments"]))
                                
                                daemon_data.append({
                                    "Source": plist_file_path,
                                    "Label": data.get("Label", "N/A"),
                                    "Program": program_arg,
                                    "RunAtLoad": data.get("RunAtLoad", False),
                                    "StartInterval": data.get("StartInterval", "N/A"),
                                    "StartCalendarInterval": data.get("StartCalendarInterval", "N/A"),
                                    "KeepAlive": data.get("KeepAlive", False)
                                })
                                app_instance.log_output(f"  ✅ Successfully processed {plist_file_path}.")
                            else:
                                app_instance.log_output(f"  ❌ Could not read content of {plist_file_path} (Permission denied or invalid format).")
                        else:
                            app_instance.log_output(f"  Skipping non-plist file: {filename}")
                else:
                    app_instance.log_output(f"❌ Could not list LaunchDaemons in {path_dir} (Command failed or permission denied for `sudo ls`).")
            else:
                app_instance.log_output(f"❌ Directory does not exist (LaunchDaemons): {path_dir}")
        
        if daemon_data:
            html_body += "<table><tr><th>Source</th><th>Label</th><th>Program/Command</th><th>Run At Load</th><th>Interval (sec)</th><th>Calendar Interval</th><th>Keep Alive</th></tr>"
            for item in daemon_data:
                html_body += f"<tr><td>{item['Source']}</td><td>{item['Label']}</td><td><pre>{item['Program']}</pre></td><td>{item['RunAtLoad']}</td><td>{item['StartInterval']}</td><td>{item['StartCalendarInterval']}</td><td>{item['KeepAlive']}</td></tr>"
            html_body += "</table>"
        else:
            html_body += "<p>No LaunchDaemons found or processed. Some may require elevated privileges to list or read contents.</p>"


        # --- LaunchAgents (User-specific and All-User Tasks) ---
        html_body += "<h3>macOS LaunchAgents (User-Specific and All-User Tasks)</h3>"
        app_instance.log_output("Gathering LaunchAgents from ~/Library/LaunchAgents/ and /Library/LaunchAgents/...")
        agent_paths = [os.path.expanduser("~/Library/LaunchAgents/"), "/Library/LaunchAgents/"]
        
        agent_data = []
        for path_dir in agent_paths:
            app_instance.log_output(f"Checking LaunchAgent directory: {path_dir}")
            if os.path.exists(path_dir):
                app_instance.log_output(f"Directory exists: {path_dir}")
                command_to_list = f"sudo ls {path_dir}" if path_dir == "/Library/LaunchAgents/" else f"ls {path_dir}"
                list_output = helpers.run_command(command_to_list, check_shell=True, app_instance=app_instance) 
                if list_output:
                    app_instance.log_output(f"Successfully listed files in {path_dir}. Processing {len(list_output.strip().splitlines())} files.")
                    for filename in list_output.strip().splitlines():
                        if filename.endswith(".plist"):
                            plist_file_path = os.path.join(path_dir, filename)
                            app_instance.log_output(f"  Attempting to read plist: {plist_file_path}")
                            data = helpers.read_plist_file(plist_file_path, app_instance=app_instance)
                            if data:
                                program_arg = "N/A"
                                if "Program" in data:
                                    program_arg = data["Program"]
                                elif "ProgramArguments" in data:
                                    program_arg = " ".join(map(str, data["ProgramArguments"]))
                                
                                agent_data.append({
                                    "Source": plist_file_path,
                                    "Label": data.get("Label", "N/A"),
                                    "Program": program_arg,
                                    "RunAtLoad": data.get("RunAtLoad", False),
                                    "StartInterval": data.get("StartInterval", "N/A"),
                                    "StartCalendarInterval": data.get("StartCalendarInterval", "N/A"),
                                    "KeepAlive": data.get("KeepAlive", False)
                                })
                                app_instance.log_output(f"  ✅ Successfully processed {plist_file_path}.")
                            else:
                                app_instance.log_output(f"  ❌ Could not read content of {plist_file_path} (Permission denied or invalid format).")
                        else:
                            app_instance.log_output(f"  Skipping non-plist file: {filename}")
                else:
                    app_instance.log_output(f"❌ Could not list LaunchAgents in {path_dir} (Command failed or permission denied for `{command_to_list}`).")
            else:
                app_instance.log_output(f"❌ Directory does not exist (LaunchAgents): {path_dir}")

        if agent_data:
            html_body += "<table><tr><th>Source</th><th>Label</th><th>Program/Command</th><th>Run At Load</th><th>Interval (sec)</th><th>Calendar Interval</th><th>Keep Alive</th></tr>"
            for item in agent_data:
                html_body += f"<tr><td>{item['Source']}</td><td>{item['Label']}</td><td><pre>{item['Program']}</pre></td><td>{item['RunAtLoad']}</td><td>{item['StartInterval']}</td><td>{item['StartCalendarInterval']}</td><td>{item['KeepAlive']}</td></tr>"
            html_body += "</table>"
        else:
            html_body += "<p>No LaunchAgents found or processed.</p>"

        # --- Cron Jobs (Traditional Unix Scheduling) ---
        html_body += "<h3>macOS Cron Jobs</h3>"
        app_instance.log_output("Gathering current user cron jobs via `crontab -l`...")
        cron_output = helpers.run_command("crontab -l", check_shell=True, app_instance=app_instance) 
        if cron_output:
            html_body += "<h4>Current User Crontab:</h4>"
            html_body += f"<pre>{cron_output}</pre>"
        else:
            app_instance.log_output("No cron jobs found for current user or `crontab -l` command failed to retrieve output.")
            html_body += "<p>No cron jobs found for current user.</p>" 

        # System-wide cron directories (often contain scripts, not direct cron entries)
        html_body += "<h4>System-wide Cron Directories and Files:</h4>"
        cron_system_paths = ["/etc/crontab", "/etc/cron.d/", "/etc/cron.daily/", "/etc/cron.hourly/", "/etc/cron.monthly/", "/etc/cron.weekly/"]
        found_system_cron_info = False
        for cpath in cron_system_paths:
            app_instance.log_output(f"Checking system cron directory/file: {cpath}")
            if os.path.exists(cpath):
                app_instance.log_output(f"Directory exists: {cpath}")
                if os.path.isdir(cpath):
                    scripts_in_dir = helpers.run_command(f"sudo ls -l {cpath}", check_shell=True, app_instance=app_instance) 
                    if scripts_in_dir:
                        app_instance.log_output(f"Successfully listed scripts in {cpath}.")
                        html_body += f"<h5>Contents of directory: {cpath}</h5><pre>{scripts_in_dir}</pre>" 
                        found_system_cron_info = True
                    else:
                        app_instance.log_output(f"❌ Could not list contents of directory {cpath} (Command failed or permission denied for `sudo ls -l`).")
                elif os.path.isfile(cpath):
                    file_content = helpers.run_command(f"sudo cat {cpath}", check_shell=True, app_instance=app_instance) 
                    if file_content:
                        app_instance.log_output(f"Successfully read content of {cpath}.")
                        html_body += f"<h5>Content of file: {cpath}</h5><pre>{file_content}</pre>" 
                        found_system_cron_info = True
                    else:
                        app_instance.log_output(f"❌ Could not read content of {cpath} (Command failed or permission denied for `sudo cat`).")
            else:
                app_instance.log_output(f"❌ Cron directory/file does not exist: {cpath}")
        if not found_system_cron_info:
            html_body += "<p>No system-wide cron scripts or crontab files found in standard locations or permission denied.</p>"
            app_instance.log_output("No system-wide cron information found or accessible.")

    else:
        html_body += "<p>Scheduled tasks reporting for Windows/Linux is different and not yet fully implemented here. (Only basic macOS scaffolding).</p>"

    helpers.generate_report_html(
        app_instance, 
        app_instance.suspect_computer_name, 
        "Scheduled_Tasks_Report.html", 
        "Scheduled Tasks Report", 
        html_body,
        browser_preference=browser_preference
    )

